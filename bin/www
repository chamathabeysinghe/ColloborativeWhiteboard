#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ColloborativeWhiteboard:server');
var http = require('http');
var service=require('../libs/services');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);

var aiMessageCount=0;
var aiCheckMessage="";
var aiLatestMessage="";
var serviceAPI = new require('../libs/services');

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


io.on('connection', function (socket) {
  console.log('user connected');
  socket.on('disconnect', function(){
    console.log('user disconnected');
  });

  socket.on('draw message', function(msg){
    console.log('message: ' + msg);
    //io.emit('receive message', msg);
    socket.broadcast.emit('receive message', msg);

  });

  socket.on('ai message',function(msg){
    console.log('AI message'+msg);
    aiMessageCount+=1;
    if(aiCheckMessage.replace("\n","")==(msg.replace("\n",""))){
      console.log("EQUALS");
      return;
    }
    aiCheckMessage+=msg+" \n";
    aiLatestMessage+=msg+" \n";
    if(aiLatestMessage.length>20){
        aiLatestMessage="";
        var websearc=serviceAPI.EntityLinking(aiCheckMessage,entityManage);
    }
    // if(aiMessageCount==2){
    //   console.log("Sending a message to AI");
    //     var websearc=serviceAPI.EntityLinking(aiCheckMessage,entityManage);
    //     aiMessageCount=0;
    //
    // }

  });

  socket.on('chat message',function (msg) {
    console.log('receive message: '+msg);
    aiMessageCount+=1;
    aiCheckMessage+=msg.text+" \n";
      aiLatestMessage+=msg.text+" \n";
      console.log(aiLatestMessage.length);
      console.log(aiLatestMessage);
      if(aiLatestMessage.length>20){
          aiLatestMessage="";
          var websearc=serviceAPI.EntityLinking(aiCheckMessage,entityManage);
      }

    // if(aiMessageCount==2){
    //   console.log("Sending a message to AI");
    //   var websearc=serviceAPI.EntityLinking(aiCheckMessage,entityManage);
    //   aiMessageCount=0;
    //
    // }
    io.emit('chat message',msg);
  });


});

var resultArray;
var searchResultArray;
/**
 * Normalize a port into a number, string, or false.
 */
var entityMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': '&quot;',
  "'": '&#39;',
  "/": '&#x2F;'
};

function escapeHtml(string) {
  return String(string).replace(/[&<>"'\/]/g, function (s) {
    return entityMap[s];
  });
}
function entityManage($response) {
  console.log("This is our search results");
  console.log(JSON.stringify($response));
  var entities=$response.entities;
  resultArray=new Array();
  searchResultArray=new Array();
  var count=0;
  console.log(entities.length);
  if(entities.length==0){
      return;
  }
  for(var i in entities){
    var name=entities[i].name;
    console.log(name);
    resultArray.push(name);

  }
  //io.emit('receive ai',resultArray);
  // acquireSearchResults();
  acquireSearchResults2();
}

var searchedCount=0;
/**  //uncomment if not working this
function acquireSearchResults() {
  var keyword=resultArray[searchedCount];
  searchedCount+=1;
  serviceAPI.WebSearch(keyword,manageSearchResults);
}
function manageSearchResults($response) {
  console.log(JSON.stringify($response));
  searchResultArray.push(escapeHtml(processWebSearch($response)));
  if(searchResultArray.length==resultArray.length){
    var outputArray=[resultArray,searchResultArray];
    searchedCount=0;
    io.emit('receive ai',outputArray);
  }
  else{
    acquireSearchResults();
  }
}
**/
function acquireSearchResults2(){

  for(i=0;i<resultArray.length;i++){
    var keyword=resultArray[i];
    serviceAPI.WebSearch(keyword,manageSearchResults2);
  }
}
resultArray2=new Array();
function manageSearchResults2($keyword,$response) {
  // console.log(JSON.stringify($response));
  resultArray2.push($keyword);
  searchResultArray.push(escapeHtml(processWebSearch($response)));
  if(searchResultArray.length==resultArray.length){
    var outputArray=[resultArray2,searchResultArray];
    searchedCount=0;
    io.emit('receive ai',outputArray);
    resultArray=new Array();
    searchResultArray=new Array();
    resultArray2=new Array();
  }
}

var processWebSearch = function(response){
  string = '';
  var webPages = response.webPages.value;
  string = string + '<div>';
  for(i=0; i < webPages.length; i++){
    string =  string + processWebPage(webPages[i])
  }
  string = string + '</div>'

  if(response.hasOwnProperty('images')){
    var images = response.images.value;
    string = string + '<div>'
    for(i=0; i < images.length; i++){
      string =  string + processImage(images[i])
    }
    string = string + '</div>'
  }

  /*
   var news = response.news.value;
   string = string + '<div>'
   for(i=0; i < news.length; i++){
   string =  string + processNews(news[i])
   }
   string = string + '</div>'
   */
  console.log(string)
  return string;

}

var processWebPage = function(webPage){
  string = '';
  string = string + '<a href="'+ webPage.url+'" > <h5>' + webPage.name + '</h5> </a>'
  string = string + '<p>'+ webPage.snippet + '</p>';
  return string;
}

var processImage = function(image){
  string = '';
  string = string + '<img src="'+image.thumbnailUrl+'" alt="'+image.name +'">';
  string = string + '<p>' + image.name + '</p>';
  return string;
}

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


